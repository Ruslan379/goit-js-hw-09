{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA;;AA4GA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GAEFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEtBG,EAAO,CAAEJ,WAAUS,MAAAR,MAClBA,OAnHM,CACXS,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,0BAcjCF,KAAKM,iBAAiB;AAM3B,SAAsBC,GACpBA,EAAIC;;;;;;;;AA0CyC,IAExBC,EAAjBF,EAAIG,cADNC,SAAYC,EAAKH,EAALV,MAAOc,EAAIJ,EAAJK,KAAMC,EAAMN,EAANO,OAG3BJ,EAAQK,OAAOL,EAAMM,OACrBL,EAAOI,OAAOJ,EAAKK,OACnBH,EAASE,OAAOF,EAAOG;;;AAUT,IAAT,IAAIC,EAAW,EAAGA,GAAYJ,EAAQI,GAAY,EACjDA,EAAW,IACbP,GAAgBC;;AAINxB,EAAE8B,EAAUP,GACrBQ,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUgC,EAAKD,EAALtB,MACjBwB,QAAQC,IAAI,uBAAwCC,OAAfnC,EAAS,QAAYmC,OAANH,EAAM;AAC1DI,EAAAvC,GAASwC,OAAOC,QAAQ,uBAAwCH,OAAfnC,EAAS,QAAYmC,OAANH,EAAM,MAAK,CAAEO,QAAS,SAEvFC,OAAM,SAAAT,G,IAAG/B,EAAQ+B,EAAR/B,SAAUyC,EAAKV,EAALtB,MAClBwB,QAAQC,IAAI,sBAAuCC,OAAfnC,EAAS,QAAYmC,OAANM,EAAM;AACzDL,EAAAvC,GAASwC,OAAOK,QAAQ,sBAAuCP,OAAfnC,EAAS,QAAYmC,OAANM,EAAM,MAAK,CAAEF,QAAS;sCAI7EtB;EAAVG,cAAcuB,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nconst refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n};\n\n\n// console.log(refs.inputDelay.name);\n// console.log(refs.inputDelay.value);\n\n\nlet delay = 0\nlet step = 0\nlet amount = 0\nlet formData = {}\n\n\nrefs.form.addEventListener('submit', onFormSubmit); //! Вешаю слушателя на form\n// refs.inputDelay.addEventListener('input', onInputDelay);\n// refs.inputStep.addEventListener('input', onInputStep);\n// refs.inputAmount.addEventListener('input', onInputAmount);\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  // console.log('Отправляем форму'); //!\n\n  // console.log(refs.inputDelay.name, refs.inputDelay.value);\n  // console.log(refs.inputStep.name, refs.inputStep.value);\n  // console.log(refs.inputAmount.name, refs.inputAmount.value);\n\n\n  //! Собираем значения всех полей input form в переменные (1-ый вариант)\n  // delay = +refs.inputDelay.value\n  // step = +refs.inputStep.value\n  // amount = +refs.inputAmount.value\n  //! _____________________________________________________________________\n\n\n  // console.log(evt.target.elements);\n  // console.log(evt.target.elements.amount);\n  // console.log(evt.target.elements.amount.value);\n\n  //! Собираем значения всех полей input form в объект formData (2-ой вариант)\n  // formData.delay = evt.target.elements.delay.value\n  // formData.step = evt.target.elements.step.value\n  // formData.amount = evt.target.elements.amount.value\n  // console.log(formData); //!\n\n  //! Собираем значения всех полей input form в переменные (2-ой вариант)\n  // delay = +formData.delay\n  // step = +formData.step\n  // amount = +formData.amount\n\n  //! Собираем значения всех полей input form в переменные (3-ий вариант)\n  //! Надо привести к числу - НЕ РАБОТАЕТ\n\n  // let {\n  //   delay: { value: delay },\n  //   step: { value: step },\n  //   amount: { value: amount },\n  // } = evt.target.elements\n\n\n  //! Собираем значения всех полей input form в переменные (4-ий вариант)\n  let {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  delay = Number(delay.value);\n  step = Number(step.value);\n  amount = Number(amount.value);\n\n\n\n  //! Консолим все значения собранные со всех полей input form\n  // console.log(\"Delay\", delay); //!\n  // console.log(\"step\", step); //!\n  // console.log(\"amount\", amount); //!\n\n  //! Запуск цикла amount-раз\n  for (let position = 1; position <= amount; position += 1) {\n    if (position > 1) {\n      delay = delay + step;\n      // console.log(delay); //!\n    };\n    //! Вызов функции createPromise\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`); //!\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { timeout: 4000, },);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`); //!\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { timeout: 4000, },);\n      });\n  }\n  //! чистим все input form после submit\n  evt.currentTarget.reset(); //? Fixed mentor remarks\n}\n\n\n//! Функция createPromise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // console.log(\"from promise\", position, delay) //!\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay4","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","form","document","querySelector","inputDelay","inputStep","inputAmount","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step1","step","amount1","amount","Number","value","position1","then","param","delay2","console","log","concat","$parcel$interopDefault","Notify","success","timeout","catch","delay3","failure","reset"],"version":3,"file":"03-promises.737cba7f.js.map"}