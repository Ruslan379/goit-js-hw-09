{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAQlCI,EAAQ;;AA+EZ,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,IACFI,QAAQC,IAAI,eAAgBV,EAAUC,GACtCE,EAAQ,CAAEH,WAAUW,MAAAV,KAEtBG,EAAO,CAAEJ,WAAUW,MAAAV,MAClBA,MAnFPV,EAAKC,KAAKoB,iBAAiB;AAM3B,SAAsBC,GACpBA,EAAIC,iBAEJL,QAAQC,IAAI;;;;;AAuC2BD,QAA/BC,IAAI,QAASZ;AACrBW,QAAQC,IAAI,OAtDH;AAuDTD,QAAQC,IAAI,SAtDD;;AAyDG,IAAT,IAAIK,EAAW,EAAGA,GAzDZ,EAyDgCA,GAAY,EACjDA,EAAW,IACbjB,GA5DK,EA6DLW,QAAQC,IAAIZ;;AAGFC,EAAEgB,EAAUjB,GACrBkB,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUkB,EAAKD,EAALN,MACjBF,QAAQC,IAAI,uBAAwCS,OAAfnB,EAAS,QAAYmB,OAAND,EAAM;AAC1DE,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCH,OAAfnB,EAAS,QAAYmB,OAAND,EAAM,MAAK,CAAEK,QAAS,SAEvFC,OAAM,SAAAP,G,IAAGjB,EAAQiB,EAARjB,SAAUyB,EAAKR,EAALN,MAClBF,QAAQC,IAAI,sBAAuCS,OAAfnB,EAAS,QAAYmB,OAANM,EAAM;AACzDL,EAAA/B,GAASgC,OAAOK,QAAQ,sBAAuCP,OAAfnB,EAAS,QAAYmB,OAANM,EAAM,MAAK,CAAEF,QAAS,Y","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n\nconst refs = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n};\n\n\n// console.log(refs.inputDelay.name);\n// console.log(refs.inputDelay.value);\n\n\nlet delay = 0\nlet step = 0\nlet amount = 0\nlet formData = {}\n\n\nrefs.form.addEventListener('submit', onFormSubmit); //! Вешаю слушателя на form\n// refs.inputDelay.addEventListener('input', onInputDelay);\n// refs.inputStep.addEventListener('input', onInputStep);\n// refs.inputAmount.addEventListener('input', onInputAmount);\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  console.log('Отправляем форму'); //!\n\n\n  // console.log(refs.inputDelay.name, refs.inputDelay.value);\n  // console.log(refs.inputStep.name, refs.inputStep.value);\n  // console.log(refs.inputAmount.name, refs.inputAmount.value);\n\n\n  //! Собираем значения всех полей input form в переменные (1-ый вариант)\n  // delay = +refs.inputDelay.value\n  // step = +refs.inputStep.value\n  // amount = +refs.inputAmount.value\n  //! _____________________________________________________________________\n\n\n  // console.log(evt.target.elements);\n  // console.log(evt.target.elements.amount);\n  // console.log(evt.target.elements.amount.value);\n\n  //! Собираем значения всех полей input form в объект formData (2-ой вариант)\n  // formData.delay = evt.target.elements.delay.value\n  // formData.step = evt.target.elements.step.value\n  // formData.amount = evt.target.elements.amount.value\n  // console.log(formData); //!\n\n  // //! Собираем значения всех полей input form в переменные (2-ой вариант)\n  // delay = +formData.delay\n  // step = +formData.step\n  // amount = +formData.amount\n\n  // //! Собираем значения всех полей input form в переменные (3-ий вариант)\n  // const { delay, step, amount } = evt.target.elements. .value\n\n\n\n\n\n\n  //! Консолим все значения собранные со всех полей input form\n  console.log(\"Delay\", delay); //!\n  console.log(\"step\", step); //!\n  console.log(\"amount\", amount); //!\n\n  //! Запуск цикла amount-раз\n  for (let position = 1; position <= amount; position += 1) {\n    if (position > 1) {\n      delay = delay + step;\n      console.log(delay); //!\n    };\n    //! Вызов функции createPromise\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`); //!\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, { timeout: 4000, },);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`); //!\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, { timeout: 4000, },);\n      });\n  }\n}\n\n\n//! Функция createPromise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log(\"from promise\", position, delay) //!\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","inputDelay","inputStep","inputAmount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","delay","addEventListener","evt","preventDefault","position1","then","param","delay1","concat","$parcel$interopDefault","Notify","success","timeout","catch","delay2","failure"],"version":3,"file":"03-promises.76974ef4.js.map"}